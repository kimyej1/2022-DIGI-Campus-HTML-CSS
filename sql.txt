1. DATABASE 접속...
    mysql -u 사용자명 데이터베이스명 -p (엔터 → 비밀번호 입력)

2. 공통 명령
    show databases;
    use mykb(DB명);
    show tables;
    quit;

3. tables
    create table my_test ( --  리눅스는 대소문자 구분하지 않기 때문에 카멜 안통함
        idx     int(10) auto_increment,
        name    varchar(20) default 'noname',
        id      varchar(20) UNIQUE,
        age     int(3) default '10',
        birth   date,
        memo    blob, -- 2^16(약 65천자), mediumblob : 2^24(약 16백만), largeblob : 2^32(약 40억)
        regist  datetime,

        primary key(idx) -- id보다 idx를 키로 쓰는게, 프로그램 및 관리에 편함!
    )

    테이블 구조 확인(describe)
        show tables;
        desc my_test;

    
    명령이 딱 4개..
        insert(삽입), update(갱신), search(검색), delete(삭제) → 한국어 꼭 이대로 써야함!(추가 X, 변경 X)

    (1) 삽입
        INSERT INTO 테이블명 (필드 나열 순서 무관) VALUES (값들을 필드 나열한 순서에 맞게 나열);

        INSERT INTO my_test (id, birth, regist) VALUES ('test', '2000-01-03', now()); -- now() 꼭 외우기! 
        INSERT INTO my_test (name, id, age, birth, memo, regist)
            VALUES ('홍길동', 'kdhong', '33', '1999-12-31', '메모 테스트', now());
    
    (2) 검색
        SELECT 필드나열 FROM 테이블명
            [WHERE 조건]
            [ORDER BY 필드 증감조건]
            [LIMIT [시작인덱스,] 갯수];

        SELECT * FROM my_test;
        SELECT name, age FROM my_test;
        SELECT *, age FROM my_test;

        SELECT * FROM kb_customer WHERE job='자영업';
        SELECT * FROM kb_customer WHERE local='서울' AND birth>='2000-01-01';
        SELECT count(*) AS mynick FROM kb_customer WHERE gender='1'; -- AS (이름)을 붙여줘야, 프로그래밍할때 변수로 쓸 수 있음

        SELECT * FROM kb_customer WHERE name like '김%';
        SELECT * FROM kb_customer WHERE name like '김%' ORDER BY birth asc;
        SELECT * FROM kb_customer WHERE name like '김%' ORDER BY birth, asc name desc;
        SELECT * FROM kb_customer limit 10;
        SELECT * FROM kb_customer limit 5,3;

        [예제]
        1) 남자이면서 장애인인 김씨를 모두 검색
            SELECT * FROM kb_customer WHERE gender='1' AND disabled='1' AND name like '김%';

        2) 여성이면서 2000년 이후 출생자, 전문인력은 모두 몇명인가?
            SELECT count(*) FROM kb_customer WHERE birth>='2000-01-01' AND job='전문직' AND gender='2';

        3) 서울에 사는 김씨는 모두 몇명인가?
            SELECT count(*) FROM kb_customer WHERE local='서울' and name like '김%';

        4) 서울에 사는 장애인 중 두번째로 나이가 많은 사람은 누구인가?
            SELECT * FROM kb_customer WHERE local='서울' AND disabled='1' ORDER BY birth asc LIMIT 1,1; -- 컴터는 0부터 세니까 1이 두번째인거!


        // dept

        CREATE table dept(
            idx     int(10) auto_increment,
            name    char(20),
            major   char(20),
            age     int(3) default '20',

            primary key(idx)
        );

        insert into dept (name, major, age) values ('홍길동', '컴퓨터', '21');

        select major from dept;
        select dept.major from dept; -- 완전히 같은 표현(같은 이름의 컬럼이 여러 테이블에 있을 수도 있으니까)

        select distinct major from dept order by major asc; -- DISTINCT : 중복 제거
        Select sum(age) from dept; -- SUM() : 합계
        select avg(age) from dept; -- AVG() : 평균


        // SELECT의 옵션 좀 더 알아보기 : WHERE, ORDER BY, LIMIT, GROUP BY, HAVING
        SELECT major, count(*) AS total FROM dept GROUP BY major HAVING total >= 2 ORDER BY total DESC;

        // SUB QUERY : SELECT 속에 SELECT
        SELECT name, major, age from dept WHERE major in (SELECT major FROM dept WHERE name='데이터');

        // 날짜 관련 함수
        SELECT now();
        SELECT date_add(now(), interval 10 day); -- day 대신 month, year, hour, minute, second.. 넣을 수 있다!
        SELECT DATEDIFF('2000-01-01', '2002-03-31') as mydiff; -- nickname 붙여야 프로그래밍에 사용 가능
        SELECT dayofweek('2022-03-01'); -- 무슨 요일? (일요일 = 1로 시작하는 데이터베이스구나!)
        SELECT dayofyear(now()); -- 일년 중 몇번째날?
        SELECT week(now()); -- 일년 중 몇번째주?

        // ROUND() : 다음자리를 보고 반올림 할지말지 결정
        // ROUND(1.23456, 2) = 1.23 -- 2번째의 다음자리(3번째)를 보고 반올림 할지말지 결정
        // ROUND(1.23456, 3) = 1.235
        SELECT ceil(1.23);
        SELECT floor(degree);


    (3) 갱신

        UPDATE 테이블명 SET 필드1='새값1', 필드2='새값2' [WHERE 조건];

        UPDATE dept SET age='11'; -- 걍 이렇게 쓰면 모두의 나이가 다 바뀌어버림
        update dept set age='23' where idx<6;
        update dept set age=age+1 where idx>0;

    (4) 삭제 : 삭제는 꼭 한번 더 물어보고 지워라!

        DELETE FROM 테이블명 [WHERE 조건;]



◼︎ IOT 시각화

    1. 데이터베이스 만들기
        필요한 정보 : 인덱스(idx), 장비 or 지점번호(branch(id)), 온도(temperature(float)), 습도(humidity(float)), 저장된 시간(time)

    2. 테이블 만들기
        create table iot(
            idx             int(10) auto_increment,
            branch          int(3) default '1',
            temperature     float, -- float는 몇자리 정해주지 않음
            humidity        float,
            time            datetime,

            primary key(idx)
        );

        insert into iot (branch, temperature, humidity, time)
        values ('1', '12.3', '45.6', now());


◼︎ 지점 층별고객 시각화

    create table bank(
            idx             int(10) auto_increment,
            branch          int(3) default '1',
            temperature     float,
            humidity        float,
            time            datetime,

            primary key(idx)
        );

    // alter : add, change, drop
    ALTER TABLE bank ADD title char(20) AFTER branch;
    ALTER TABLE bank CHANGE title name char(30); -- title char(20)을 name char(30)으로 바꿔라
    ALTER TABLE bank DROP name;
    DESC bank;
    ALTER TABLE bank CHANGE temperature floor int(3) default '1';
    ALTER TABLE bank CHANGE humidity person int(5) default '0';


◼︎ 나이키 운동화 쇼핑몰

    create table models (
        idx     int(10) auto_increment,
        model   char(30) default 'no title',
        size    char(50) default '220,230,240,250,260', -- 사용자 아닌 개발자의 입장에서는 int 아니고 char, 디폴트도 나열식
                                                        -- 저장할때도 240 샀을때 '3번째꺼'라고 저장하면 안됨, (품절돼서 없어지거나, 210이 추가되어서 순서가 바뀔수도..)
        color   char(50) default '빨강,파랑,노랑',
        price   int(10) default '10000',                -- 색깔, 가격도 마찬가지로 바뀔 수 있기 때문에 ⭐️내가 산 시점의 정보를 사용자정보에 다 기록해둬야함!⭐️

        primary key(idx)
    );

    insert into models (models,price) values ('조던1헤리티지', '12000');

    create table cart (
        idx     int(10) auto_increment,
        idx     char(20),
        midx    int(10) default '0',            -- model의 idx(모델 이름은 겹칠 수도 있어서)
        size    char(50),                       -- size와 color은 디폴트 불필요(사용자가 선택한 값으로)
        color   char(50),
        count   int(3) default '0',
        price   int(10) default'0',
        time    char(20),                       -- session time
        
        primary key(idx)
    );

    alter table cart add price int(10) default '0' after count;

    create table users (
        idx     int(10) auto_increment,
        name    char(30),
        id      char(20),

        primary key(idx)
    )


◼︎ VIEW : 가상 테이블명
    
    create or replace view v_customer as 
        select * from kb_customer
        where name like '김%';


select @@autocommit; -- 명령 하자마자 자동 커밋
set autocommit = false; -- 자동 커밋 X
set autocommit = true; -- 자동 커밋 O

create table birth_table (
        idx     int(10) auto_increment,
        name	char(20),
        birth	date, -- input type="date"
        city	char(20),
        primary key(idx)	
);

create table kbstar(
    idx  int(10) auto_increment,
    id   char(20) unique,
    name char(20),
    age  int(3) default '10',
    primary key(idx)
);


insert into kbstar(id, name, age) value('test', '테스트', '12');
insert into kbstar(id, name, age) value('admin', '관리자', '31');
insert into kbstar(id, name, age) value('sslee', '이순신', '57');

insert into kbstar (id, name, age) values('kim','김길동','30');
insert into kbstar (id, name, age) values('dsfdas','김개똥','23');
insert into kbstar (id, name, age) values('e4r9df','이순신','12');
insert into kbstar (id, name, age) values('49ef022','이승만','13');
insert into kbstar (id, name, age) values('df02','윤보선','53');
insert into kbstar (id, name, age) values('e902','박정희','21');
insert into kbstar (id, name, age) values('2dfkdf','전두환','53');
insert into kbstar (id, name, age) values('dfkdasf','노태우','21');
insert into kbstar (id, name, age) values('users','김영삼','43');
insert into kbstar (id, name, age) values('kbstet','김대중','21');


create table members(
    idx  int(10) auto_increment,
    id   char(20) unique,
    name char(20),
    pass char(50), -- 암호화하면 길어지기 때문에 생각보다 꽤 크게 만들어야함
    level int(3) default '1', 

    primary key(idx)
);

insert into members (id, name, pass, level) values('admin', 'KB관리', password('1111'), '9'); -- password() 안에 넣어주면 암호화

alter table members add age int(3) default '10'; -- members에 age항목 추가하기



create table log_table (
    idx   int(20) auto_increment,
    ip      char(20),
    cmd     char(30),
    uri     char(255),
    time    datetime,
    primary key(idx)
);
